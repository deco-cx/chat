---
// LinkAnalyzerForm Astro component (no React)
---
<style>
  :root {
    /* Fallbacks in case theme vars not present */
    --la-accent: var(--sl-color-accent, #2563eb);
    --la-border: var(--sl-color-gray-5, #d0d7de);
    --la-bg-alt: var(--sl-color-gray-2, #f1f5f9);
    --la-text-muted: var(--sl-color-gray-6, #64748b);
    --la-danger: #dc2626;
    --la-warn: #f59e0b;
    --la-info: #6366f1;
  }
  .la-root { margin:1.5rem 0; }
  .la-card { background:var(--color-surface,linear-gradient(145deg,rgba(17,24,39,.92),rgba(30,41,59,.88))); border:1px solid var(--color-border,rgba(255,255,255,.08)); border-radius:var(--radius-lg,20px); padding:1.25rem 1.5rem 1.35rem; box-shadow:var(--shadow-card,0 12px 40px -18px rgba(0,0,0,.65)); }
  .la-card h3 { font-size:15px; }
  .la-card section { padding-bottom:1rem; border-bottom:1px solid rgba(255,255,255,.07); margin-bottom:1.1rem; }
  .la-card section:last-of-type { border-bottom:none; margin-bottom:.25rem; padding-bottom:0; }
  .la-flex { display:flex; gap:.75rem; flex-wrap:wrap; align-items:flex-end; }
  .la-history { margin-top:1.25rem; }
  .la-history button { background:var(--la-bg-alt); border:1px solid var(--la-border); padding:4px 10px; border-radius:999px; cursor:pointer; font-size:12px; line-height:1; }
  .la-history button:hover { background:var(--sl-color-gray-3,#e2e8f0); }
  .la-chip { display:inline-block; margin:4px 6px 0 0; }
  .la-spinner { width:16px; height:16px; border:3px solid var(--la-border); border-top-color:var(--la-accent); border-radius:50%; animation: la-spin 0.8s linear infinite; display:inline-block; vertical-align:middle; }
  @keyframes la-spin { to { transform:rotate(360deg); } }
  .la-badge { font-size:11px; background:var(--la-accent); color:#fff; padding:2px 6px; border-radius:10px; margin-left:8px; letter-spacing:.5px; }
  .la-badge.stub { background:var(--la-warn); }
  .la-badge.proxy { background:var(--la-info); }
  .la-status { font-size:12px; color:var(--la-text-muted); margin-left:4px; }
  .la-muted { color:#8ea2b8; font-size:12.5px; }
  .la-section-title { margin-top:1.75rem; font-size:14px; font-weight:600; }
  .la-result { background:#0f172a; color:#e2e8f0; }
  .la-toolbar { display:flex; gap:.5rem; align-items:center; margin-top:.5rem; }
  .la-mini-btn { font-size:11px; padding:4px 8px; border:1px solid var(--la-border); background:var(--la-bg-alt); border-radius:6px; cursor:pointer; }
  .la-mini-btn:hover { background:var(--sl-color-gray-3,#e2e8f0); }
  .la-mini-btn.primary { background:var(--la-accent); color:#fff; border-color:var(--la-accent); }
  .la-mini-btn.primary:hover { filter:brightness(1.1); }
  .la-timing { font-size:11px; color:var(--la-text-muted); margin-left:auto; }
  .la-tree { font-family: ui-monospace, monospace; font-size:13px; line-height:1.4; }
  .la-tree details { margin-left: .75rem; }
  .la-tree summary { cursor: pointer; }
  .la-tree-key { color:#93c5fd; }
  .la-tree-type { color:#a3a3a3; font-style:italic; margin-left:4px; }
  .la-tree-value-string { color:#fcd34d; }
  .la-tree-value-number { color:#fca5a5; }
  .la-tree-value-bool { color:#fdba74; }
  .la-toolbar-sep { width:1px; background:var(--la-border); align-self:stretch; }
  @media (prefers-color-scheme: dark) {
    .la-card { background: var(--sl-color-gray-6,#1e293b); border-color:#334155; box-shadow:0 1px 2px rgba(0,0,0,.5); }
    .la-bg-alt { background:#1e293b; }
    .la-input { background:#0f172a; color:#e2e8f0; border-color:#334155; }
    .la-history button { background:#1e293b; border-color:#334155; }
    .la-history button:hover { background:#334155; }
    .la-mini-btn { background:#1e293b; border-color:#334155; color:#e2e8f0; }
    .la-mini-btn:hover { background:#334155; }
    .la-result { background:#0f172a; }
  }
  .la-input { width:100%; padding:10px 14px; border:1px solid #334155; border-radius:10px; background:#0f172a; color:#e2e8f0; font-size:.9rem; }
  .la-input:focus { outline:2px solid var(--la-accent); outline-offset:1px; }
  .la-btn { padding:12px 22px; border-radius:12px; background:linear-gradient(90deg,#6366f1,#7e22ce,#2563eb); color:#fff; border:none; cursor:pointer; font-weight:600; display:inline-flex; align-items:center; gap:8px; font-size:.9rem; box-shadow:0 8px 28px -10px rgba(99,102,241,.55); transition:.25s; }
  .la-btn:hover { transform:translateY(-2px); box-shadow:0 12px 34px -12px rgba(99,102,241,.6); }
  .la-btn:disabled { opacity:.55; cursor:not-allowed; }
  /* Summary card restyle */
  #la-summary { background:linear-gradient(150deg,#0f172a 0%,#111c2e 45%,#0b1020 100%) !important; border:1px solid rgba(255,255,255,.12) !important; box-shadow:0 12px 42px -16px rgba(0,0,0,.7); color:#e2e8f0; }
  #la-summary .la-block-title { font-size:11px; font-weight:600; letter-spacing:.6px; text-transform:uppercase; color:#7ea6d6; }
  #la-score { background:linear-gradient(90deg,#6366f1,#2563eb); -webkit-background-clip:text; color:transparent; text-shadow:0 0 18px rgba(99,102,241,.25); }
  #la-score[data-score-color] { color:var(--score-color); background:none; -webkit-background-clip:border-box; text-shadow:0 2px 14px rgba(0,0,0,.45); }
  #la-score-label { font-weight:600; letter-spacing:.5px; }
  #la-actions, #la-ai-list { color:#b8cbe0; }
  #la-actions li strong { color:#93adc9; }
  #la-summary .section-heading { margin-top:12px; font-size:12px; font-weight:600; letter-spacing:.5px; text-transform:uppercase; background:linear-gradient(90deg,#6366f1,#7e22ce); -webkit-background-clip:text; color:transparent; }
  #la-summary .divider-soft { height:1px; background:linear-gradient(90deg,transparent,rgba(255,255,255,.08),transparent); border:none; margin:14px 0 10px; }
</style>
<div id="link-analyzer-root" class="la-root fade-in">
  <div class="la-card">
    <form id="link-analyzer-form" style="margin-bottom:0.75rem; display:flex; flex-direction:column; gap:1rem;" aria-describedby="la-help" novalidate>
      <p id="la-help" class="visually-hidden">Formulário em três etapas para analisar uma página inicial e gerar score e ações de SEO.</p>
      <!-- Step 1: Domain -->
  <fieldset style="border:none; margin:0; padding:0; display:flex; gap:14px; align-items:flex-start;">
        <div style="width:42px; height:42px; display:flex; align-items:center; justify-content:center; background:var(--la-bg-alt); border:1px solid var(--la-border); border-radius:10px; flex-shrink:0;">
          <!-- Icon step 1 -->
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color:var(--la-accent);"><circle cx="12" cy="12" r="10"/><path d="M2 12h20"/><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"/></svg>
        </div>
        <div style="flex:1; min-width:0;">
              <h3 style="margin:0 0 .55rem; font-size:15px; font-weight:600; display:flex; gap:6px; align-items:center;">1. Informe o domínio principal <span style="font-size:10px; font-weight:600; background:#1e293b; padding:3px 7px; border-radius:14px; letter-spacing:.5px; text-transform:uppercase;">Obrigatório</span></h3>
              <div style="font-size:var(--fs-base,1.05rem); line-height:1.55; margin:0 0 .7rem; color:#b8cbe0;">Use apenas o domínio base (sem <code>https://</code>). A página inicial é analisada para gerar o primeiro panorama.</div>
          <input id="la-domain" class="la-input" type="text" required placeholder="ex: exemplo.com" autocomplete="url" aria-required="true" aria-describedby="la-domain-hint" />
          <div id="la-domain-hint" class="la-muted" style="margin-top:4px;">Sem <code>https://</code>. Ex: <code>meusite.com</code></div>
        </div>
      </fieldset>
      <!-- Step 2: Scope -->
  <fieldset style="border:none; margin:0; padding:0; display:flex; gap:14px; align-items:flex-start;">
        <div style="width:42px; height:42px; display:flex; align-items:center; justify-content:center; background:var(--la-bg-alt); border:1px solid var(--la-border); border-radius:10px; flex-shrink:0;">
          <!-- Icon step 2 -->
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color:var(--la-accent);"><path d="M3 12h18"/><path d="M12 3v18"/></svg>
        </div>
        <div style="flex:1; min-width:0;">
          <h3 style="margin:0 0 .55rem; font-size:15px; font-weight:600;">2. Defina o escopo</h3>
          <div style="font-size:var(--fs-base,1.05rem); line-height:1.55; margin:0 0 .65rem; color:#b8cbe0;">Escolha como quer focar a análise agora. Modos avançados (subpastas, rastreamento) chegam em breve.</div>
          <div style="display:flex; flex-direction:column; gap:6px; font-size:13px;" role="radiogroup" aria-label="Escopo da análise">
            <label style="display:flex; gap:6px; align-items:center; cursor:pointer;">
              <input type="radio" name="scope" value="root" checked aria-checked="true" /> Domínio raiz inteiro
            </label>
            <label style="display:flex; gap:6px; align-items:center; cursor:pointer;">
              <input type="radio" name="scope" value="subdomain" /> Subdomínio específico
            </label>
            <label style="display:flex; gap:6px; align-items:center; cursor:pointer;">
              <input type="radio" name="scope" value="folders" /> Conjunto de subpastas
            </label>
          </div>
          <div id="la-subdomain-wrap" style="display:none; margin-top:8px;">
            <input id="la-subdomain" class="la-input" type="text" placeholder="ex: blog.exemplo.com" />
            <div class="la-muted" style="margin-top:4px;">Informe o subdomínio completo.</div>
          </div>
          <div id="la-folders-wrap" style="display:none; margin-top:8px;">
            <textarea id="la-folders" class="la-input" rows="3" placeholder="/blog\n/produtos\n/cases" style="font-family:ui-monospace,monospace;"></textarea>
            <div class="la-muted" style="margin-top:4px;">Uma subpasta por linha. (Futuro: rastreamento; agora apenas página inicial).</div>
          </div>
        </div>
  </fieldset>
      <!-- Step 3: Run -->
  <fieldset style="border:none; margin:0; padding:0; display:flex; gap:14px; align-items:flex-start;">
        <div style="width:42px; height:42px; display:flex; align-items:center; justify-content:center; background:var(--la-bg-alt); border:1px solid var(--la-border); border-radius:10px; flex-shrink:0;">
          <!-- Icon step 3 -->
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color:var(--la-accent);"><path d="M12 20V10"/><path d="M18 20V4"/><path d="M6 20v-6"/></svg>
        </div>
        <div style="flex:1; min-width:200px; display:flex; flex-wrap:wrap; gap:12px; align-items:flex-start;">
          <div style="flex:1; min-width:240px;">
            <h3 style="margin:0 0 .45rem; font-size:15px; font-weight:600;">3. Execute a verificação</h3>
            <div style="font-size:var(--fs-base,1.05rem); line-height:1.55; color:#b8cbe0;">Geramos score e ações prioritárias instantaneamente. Em breve: histórico comparativo e recomendações expansíveis.</div>
          </div>
          <div style="display:flex; gap:8px; align-items:center; margin-left:auto;">
            <button id="la-submit" type="submit" class="la-btn" aria-describedby="la-status">Iniciar Análise</button>
            <span id="la-loading" style="display:none;" aria-label="Carregando"><span class="la-spinner"></span></span>
          </div>
        </div>
      </fieldset>
      <div style="margin-top:0; display:flex; align-items:center; gap:8px;">
  <span id="la-status" class="la-status" aria-live="polite" aria-atomic="true"></span>
        <span id="la-mode" class="la-badge" style="display:none;"></span>
      </div>
    </form>
    <div id="la-error" style="color:var(--la-danger);margin-top:2px;display:none;font-weight:500;"></div>
    <div id="la-summary" style="display:none; margin-top:16px; padding:20px 22px 22px; border-radius:24px;">
      <div style="display:flex; gap:34px; flex-wrap:wrap; align-items:flex-start;">
        <div style="flex:1; min-width:200px;">
          <div class="la-block-title">Pontuação de Integridade</div>
          <div id="la-score" aria-live="polite" style="font-size:48px; font-weight:700; line-height:1; margin-top:6px;">--</div>
          <div id="la-score-label" class="la-muted" style="margin-top:6px;">Aguardando</div>
        </div>
        <div style="flex:2; min-width:300px;">
          <div class="section-heading">Ações Prioritárias</div>
          <ul id="la-actions" style="margin:8px 0 0; padding:0 0 0 20px; font-size:13px; line-height:1.5;"></ul>
          <hr class="divider-soft" />
          <div>
            <div class="section-heading" style="margin-top:0;">Oportunidades de Otimização (AI)</div>
            <ul id="la-ai-list" style="margin:8px 0 0; padding:0 0 0 20px; line-height:1.5; font-size:13px;"></ul>
          </div>
        </div>
      </div>
      <div style="margin-top:12px; display:flex; gap:8px; flex-wrap:wrap;">
        <button type="button" id="la-toggle-raw" class="la-mini-btn">Ver JSON</button>
        <button type="button" id="la-tree" class="la-mini-btn">Árvore</button>
        <button type="button" id="la-copy" class="la-mini-btn">Copiar JSON</button>
        <button type="button" id="la-csv" class="la-mini-btn" disabled>Exportar CSV</button>
        <span class="la-toolbar-sep"></span>
        <button type="button" id="la-clear" class="la-mini-btn">Limpar histórico</button>
        <span id="la-timing" class="la-timing"></span>
      </div>
    </div>
    <div id="la-output" style="display:none; margin-top:12px;">
      <pre id="la-result" style="margin-top:0;background:#0f172a;padding:16px;border-radius:8px;overflow-x:auto;font-size:13px;line-height:1.5;max-height:420px;"></pre>
      <div id="la-tree-view" style="display:none;margin-top:6px;background:#0f172a;padding:16px;border-radius:8px;overflow:auto;max-height:420px;" class="la-tree"></div>
    </div>
    <div id="la-history" class="la-history" style="display:none; margin-top:16px;">
      <div class="la-section-title">Histórico recente</div>
      <div id="la-history-items"></div>
      <div class="la-muted" style="margin-top:4px;">Armazena até 8 entradas localmente.</div>
    </div>
  </div>
</div>
<script>
(function(){
  // Worker base (always use worker now; static site build friendly)
  const PROD_FALLBACK = 'https://seo-ecommercex.ggstv-fer.workers.dev';
  const MAX_HISTORY = 8;
  const form = document.getElementById('link-analyzer-form');
  const domainInput = document.getElementById('la-domain');
  const subdomainWrap = document.getElementById('la-subdomain-wrap');
  const subdomainInput = document.getElementById('la-subdomain');
  const foldersWrap = document.getElementById('la-folders-wrap');
  const foldersInput = document.getElementById('la-folders');
  const submit = document.getElementById('la-submit');
  const statusEl = document.getElementById('la-status');
  const errorEl = document.getElementById('la-error');
  const resultEl = document.getElementById('la-result');
  const outputWrap = document.getElementById('la-output');
  const copyBtn = document.getElementById('la-copy');
  const treeBtn = document.getElementById('la-tree');
  const csvBtn = document.getElementById('la-csv');
  const clearBtn = document.getElementById('la-clear');
  const timingEl = document.getElementById('la-timing');
  const treeView = document.getElementById('la-tree-view');
  const summaryWrap = document.getElementById('la-summary');
  const scoreEl = document.getElementById('la-score');
  const scoreLabelEl = document.getElementById('la-score-label');
  const actionsEl = document.getElementById('la-actions');
  const aiOpsEl = document.getElementById('la-ai-list');
  const toggleRawBtn = document.getElementById('la-toggle-raw');
  // Removed saveBtn (persistence feature deferred)
  let supaAvailable = false;
  let lastData = null;
  const loadingEl = document.getElementById('la-loading');
  const modeEl = document.getElementById('la-mode');
  const historyWrap = document.getElementById('la-history');
  const historyItems = document.getElementById('la-history-items');
  let history = [];
  // Resolve base da API
  // Produção: caminho relativo '/mcp/tools'. Dev: localhost:3001 (ou PUBLIC_API_URL se definida)
  let apiBase = import.meta.env.PUBLIC_API_URL || '/mcp/tools';
  if (typeof window !== 'undefined') {
    const host = window.location.hostname;
    const isLocal = host === 'localhost' || host === '127.0.0.1';
    if (isLocal) {
      if (!import.meta.env.PUBLIC_API_URL) apiBase = 'http://localhost:3001/mcp/tools';
    } else {
      if (apiBase.includes('localhost')) apiBase = '/mcp/tools';
    }
  }

  function loadHistory(){
    try {
      const raw = localStorage.getItem('la-history');
      if(raw){ history = JSON.parse(raw).slice(0, MAX_HISTORY); }
    } catch { history = []; }
    renderHistory();
  }

  function saveHistory(){
    try { localStorage.setItem('la-history', JSON.stringify(history.slice(0, MAX_HISTORY))); } catch {}
  }

  function pushHistory(url, ok){
    history = [url, ...history.filter(u=>u!==url)].slice(0, MAX_HISTORY);
    saveHistory();
    renderHistory();
  }

  function renderHistory(){
    if(!history.length){ historyWrap.style.display='none'; return; }
    historyWrap.style.display='block';
    historyItems.innerHTML='';
    history.forEach(u=>{
      const btn = document.createElement('button');
      btn.type='button';
      btn.className='la-chip';
      btn.textContent=u.length>48? u.slice(0,45)+'…' : u;
      btn.title=u;
      btn.addEventListener('click', ()=>{
        // Normaliza para campo domínio (remove protocolo e trailing slash)
        try {
          let norm = u.trim();
          norm = norm.replace(/^https?:\/\//i,'').replace(/\/.*$/,'').replace(/\/$/,'');
          domainInput.value = norm;
          domainInput.focus();
        } catch { domainInput.value = u; }
        resultEl.style.display='none';
        errorEl.style.display='none';
        statusEl.textContent='';
      });
      historyItems.appendChild(btn);
    });
  }

  function showMode(mode, source){
    modeEl.style.display='inline-block';
    let label;
    if(source==='stub'){
      label='STUB';
      modeEl.className='la-badge stub';
    } else if(source==='proxy'){
      label= mode==='local'? 'LOCAL' : mode==='prod'? 'PROXY-PROD' : mode.toUpperCase();
      modeEl.className='la-badge proxy';
    } else if(source==='supa') {
      label='SUPA';
      modeEl.className='la-badge';
    } else {
      label= mode==='local'? 'LOCAL' : mode==='prod'? 'PROD' : mode.toUpperCase();
      modeEl.className='la-badge';
    }
    modeEl.textContent=label;
  }

  if(apiBase.startsWith('http://localhost') || apiBase.startsWith('https://localhost')) {
    statusEl.textContent='Usando endpoint local.'; showMode('local');
  } else {
    statusEl.textContent='Usando endpoint produção.'; showMode('prod');
  }
  loadHistory();

  form.addEventListener('change', (e)=>{
    if(e.target && e.target.name === 'scope'){
      const val = e.target.value;
      subdomainWrap.style.display = val === 'subdomain' ? 'block' : 'none';
      foldersWrap.style.display = val === 'folders' ? 'block' : 'none';
    }
  });

  function buildAnalyzeUrl(){
    let domain = domainInput.value.trim();
    if(!domain) return null;
    domain = domain.replace(/^https?:\/\//i,'').replace(/\/$/,'');
    const scope = form.querySelector('input[name="scope"]:checked')?.value || 'root';
    if(scope === 'subdomain'){
      const sd = subdomainInput.value.trim();
      if(sd) domain = sd.replace(/^https?:\/\//i,'').replace(/\/$/,'');
    }
    return 'https://' + domain + '/';
  }

  function deriveActions(result){
    const actions = []; const push=(p,l)=>actions.push({priority:p,label:l});
    if(!result.title) push(1,'Adicionar <title>'); else if(result.titleLength < 15 || result.titleLength > 65) push(3,'Ajustar comprimento do título (15-65 chars)');
    if(!result.metaDescription) push(1,'Adicionar meta description'); else if(result.metaDescriptionLength < 50 || result.metaDescriptionLength > 165) push(3,'Otimizar meta description (50-165 chars)');
    if(result.h1Count === 0) push(2,'Adicionar H1 principal'); else if(result.h1Count > 2) push(4,'Reduzir quantidade de H1');
    if(result.imagesMissingAlt > 0) push(2,`Adicionar alt em ${result.imagesMissingAlt} imagem(ns)`);
    if(result.brokenLinks > 0) push(1,`Corrigir ${result.brokenLinks} link(s) quebrado(s)`);
    if(result.wordCount < 200) push(3,'Expandir conteúdo para 200+ palavras');
    if(result.internalLinks < 3) push(4,'Adicionar mais links internos');
    if(result.externalLinks === 0) push(5,'Adicionar link externo relevante');
    if(result.linksFound > 300) push(5,'Reduzir número total de links na página');
    actions.sort((a,b)=> a.priority - b.priority);
    return actions;
  }

  function deriveAiOps(result){
    const list=[];
    if(!result.metaDescription || result.metaDescriptionLength < 50 || result.metaDescriptionLength > 165) list.push('Gerar meta description otimizada');
    if(!result.title || result.titleLength < 15 || result.titleLength > 65) list.push('Sugerir melhorias de título');
    if(result.imagesMissingAlt > 0) list.push('Gerar sugestões de alt para imagens');
    if(result.wordCount < 200) list.push('Gerar parágrafos para expansão de conteúdo');
    return list;
  }

  function colorScore(score){ if(score>=85) return '#16a34a'; if(score>=70) return '#f59e0b'; return '#dc2626'; }

  form.addEventListener('submit', async (e)=>{
    e.preventDefault();
    errorEl.style.display='none';
    outputWrap.style.display='none'; treeView.style.display='none';
    const constructedUrl = buildAnalyzeUrl();
    if(!constructedUrl){ errorEl.textContent='Informe o domínio.'; errorEl.style.display='block'; return; }
    const url = constructedUrl;
    const start = performance.now();
    submit.disabled=true; submit.textContent='Analisando...'; loadingEl.style.display='inline-block'; summaryWrap.style.display='none';
    statusEl.textContent='';
    try{
  const endpoint = apiBase;
  let res=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({tool:'LINK_ANALYZER',input:{url}})});
      if(!res.ok) throw new Error('HTTP '+res.status);
  const data=await res.json(); lastData = data.result? { tool:'LINK_ANALYZER', result:data.result } : data;
  const elapsed = Math.round(performance.now()-start);
  resultEl.textContent=JSON.stringify(data,null,2);
  const r = data.result || data;
  try { localStorage.setItem('la-last-analysis', JSON.stringify(data)); } catch {}
  try { window.dispatchEvent(new CustomEvent('la-analysis-finished', { detail: { url } })); } catch {}
      if(r && typeof r.seoScore === 'number'){
        scoreEl.textContent = r.seoScore;
        const col = colorScore(r.seoScore);
        scoreEl.setAttribute('data-score-color','');
        scoreEl.style.setProperty('--score-color', col);
        scoreEl.style.color = 'var(--score-color)';
        scoreLabelEl.textContent = r.seoScore >= 85 ? 'Ótimo' : r.seoScore >= 70 ? 'Atenção' : 'Melhorar';
      } else { scoreEl.textContent='--'; scoreLabelEl.textContent='Indisponível'; }
      const actions = deriveActions(r||{});
      actionsEl.innerHTML = actions.length ? actions.map(a=>`<li><strong>[P${a.priority}]</strong> ${a.label}</li>`).join('') : '<li>Nenhuma ação prioritária.</li>';
      const aiOps = deriveAiOps(r||{});
      aiOpsEl.innerHTML = aiOps.length ? aiOps.map(o=>`<li>${o}</li>`).join('') : '<li>Sem sugestões adicionais.</li>';
  summaryWrap.style.display='block';
  // Move foco para score após resultado para leitores de tela
  try { scoreEl.setAttribute('tabindex','-1'); scoreEl.focus({preventScroll:false}); setTimeout(()=> scoreEl.removeAttribute('tabindex'), 600); } catch {}
      timingEl.textContent = elapsed+' ms';
  // Habilita CSV se encontrar campo links (array)
      const links = (data?.result?.links) || data?.links;
      if(Array.isArray(links) && links.length){
        const uniq = [...new Set(links)];
        if(uniq.length !== links.length){ data.result ? data.result.links = uniq : (data.links = uniq); }
        csvBtn.disabled=false;
      } else { csvBtn.disabled=true; }
      const src = res.headers.get('X-Source');
      if(src==='stub'){
        statusEl.textContent='Resultado retornado do stub local.';
        showMode('local','stub');
      } else if(src==='proxy') {
        statusEl.textContent='Resultado via proxy produção.';
        showMode(apiBase? 'prod':'local','proxy');
      }
      pushHistory(url, true);
    }catch(err){
      errorEl.textContent=err.message||'Erro desconhecido';
      errorEl.style.display='block';
      try { errorEl.setAttribute('role','alert'); errorEl.focus({preventScroll:true}); } catch {}
      pushHistory(url, false);
    }finally{
      submit.disabled=false; submit.textContent='Iniciar Análise'; loadingEl.style.display='none';
    }
  });
  toggleRawBtn.addEventListener('click', ()=>{
    const showing = outputWrap.style.display==='block';
    if(showing){ outputWrap.style.display='none'; toggleRawBtn.textContent='Ver JSON'; }
    else { outputWrap.style.display='block'; toggleRawBtn.textContent='Ocultar JSON'; }
  });

  copyBtn.addEventListener('click', ()=>{
    if(!resultEl.textContent) return;
    navigator.clipboard.writeText(resultEl.textContent).then(()=>{
      copyBtn.textContent='Copiado';
      setTimeout(()=> copyBtn.textContent='Copiar JSON', 1600);
    });
  });

  function buildTree(node, container){
    if(node === null){
      const span=document.createElement('span'); span.textContent='null'; span.className='la-tree-value-bool'; container.appendChild(span); return; }
    if(typeof node !== 'object'){
      const span=document.createElement('span');
      let cls='';
      if(typeof node === 'string'){ cls='la-tree-value-string'; span.textContent='"'+node+'"'; }
      else if(typeof node === 'number'){ cls='la-tree-value-number'; span.textContent=String(node); }
      else if(typeof node === 'boolean'){ cls='la-tree-value-bool'; span.textContent=String(node); }
      else { span.textContent=String(node); }
      span.className=cls; container.appendChild(span); return;
    }
    if(Array.isArray(node)){
      const details=document.createElement('details'); details.open=false;
      const summary=document.createElement('summary'); summary.innerHTML='<span class="la-tree-key">[array]</span> <span class="la-tree-type">('+node.length+')</span>';
      details.appendChild(summary);
      node.forEach((item,i)=>{
        const div=document.createElement('div'); div.style.marginLeft='.5rem';
        const keySpan=document.createElement('span'); keySpan.className='la-tree-key'; keySpan.textContent='['+i+']:'; div.appendChild(keySpan); div.appendChild(document.createTextNode(' '));
        buildTree(item, div); details.appendChild(div);
      });
      container.appendChild(details); return;
    }
    const details=document.createElement('details'); details.open=false;
    const summary=document.createElement('summary'); summary.innerHTML='<span class="la-tree-key">{object}</span> <span class="la-tree-type">'+Object.keys(node).length+' keys</span>';
    details.appendChild(summary);
    Object.entries(node).forEach(([k,v])=>{
      const line=document.createElement('div'); line.style.marginLeft='.5rem';
      const keySpan=document.createElement('span'); keySpan.className='la-tree-key'; keySpan.textContent=k+':'; line.appendChild(keySpan); line.appendChild(document.createTextNode(' '));
      buildTree(v, line); details.appendChild(line);
    });
    container.appendChild(details);
  }

  treeBtn.addEventListener('click', ()=>{
    if(!lastData){ return; }
    const showingTree = treeView.style.display==='block';
    if(showingTree){
      treeView.style.display='none';
      resultEl.style.display='block';
      treeBtn.textContent='Árvore';
      return;
    }
    treeView.innerHTML='';
    buildTree(lastData, treeView);
    resultEl.style.display='none';
    treeView.style.display='block';
    treeBtn.textContent='JSON';
  });

  csvBtn.addEventListener('click', ()=>{
    if(csvBtn.disabled || !lastData) return;
  const links = (lastData?.result?.links) || lastData?.links;
  if(!Array.isArray(links) || !links.length) return;
  const uniq = [...new Set(links)];
  const rows = [['index','link']].concat(uniq.map((l,i)=>[String(i), l]));
    const csv = rows.map(r=> r.map(field => '"'+String(field).replace(/"/g,'""')+'"').join(',')).join('\n');
    const blob = new Blob([csv], { type:'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a=document.createElement('a'); a.href=url; a.download='links.csv'; document.body.appendChild(a); a.click(); a.remove();
    setTimeout(()=> URL.revokeObjectURL(url), 2000);
  });

  clearBtn.addEventListener('click', ()=>{
    history=[]; saveHistory(); renderHistory();
    statusEl.textContent='Histórico limpo.';
  });

  // Removido fluxo de salvar até persistência futura
})();
</script>
