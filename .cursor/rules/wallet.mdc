---
description: Wallet/Payments related
globs:
alwaysApply: false
---
# Wallet System Architecture

This document explains how the wallet system works in deco.chat, covering the currency system, transaction management, billing integration, usage tracking, and the new plan-based pricing system.

## Overview

The wallet system manages **AI credits** for workspaces using a precise currency system called **MicroDollar** and a double-entry accounting system to track usage, payments, and balance transfers.

### Key Components:
- **MicroDollar**: Precise currency system (1 USD = 1,000,000 microdollars)  
- **Wallet API**: RESTful service for account management and transactions
- **Transaction System**: Double-entry accounting with typed transaction operations
- **Billing Integration**: Stripe payments with plan-based markup pricing and webhooks
- **Usage Tracking**: Real-time AI usage monitoring and charging
- **Plan System**: Database-driven pricing plans with seat limits and monthly credits

## 1. MicroDollar Currency System

### Purpose
MicroDollar avoids floating-point precision issues by using integer arithmetic for monetary calculations.

```typescript
// packages/sdk/src/mcp/wallet/microdollar.ts
export class MicroDollar {
  private readonly microdollars: bigint;
  private static readonly MICRO_MULTIPLIER = BigInt(1_000_000);
  
  // Create from different sources
  public static fromDollars(dollars: number): MicroDollar
  public static fromCents(cents: number): MicroDollar  
  public static fromMicrodollarString(microdollars: string): MicroDollar
  
  // Convert to different formats
  public toDollars(): number
  public display(): string // e.g., "$1.50"
  public toMicrodollarString(): string // e.g., "1_500000"
  
  // Arithmetic operations
  public add(other: MicroDollar): MicroDollar
  public subtract(other: MicroDollar): MicroDollar
  public multiply(multiplier: number): MicroDollar
  public divide(divisor: number): MicroDollar
  public abs(): MicroDollar
}
```

### String Format
- **Small amounts**: `"500000"` (= $0.50)
- **Large amounts**: `"1_500000"` (= $1.50)  
- **Negative amounts**: `"-1_500000"` (= -$1.50)

## 2. Plan System

### Plan Database Structure
Plans are now stored in the database with rich metadata:

```typescript
// packages/sdk/src/plan.ts
export interface PlanWithTeamMetadata extends Plan {
  id: string;                    // UUID
  title: string;                 // "Free", "Starter", "Growth", "Scale"
  markup: number;                // Markup percentage (0-100)
  user_seats: number;            // Maximum team seats
  monthly_credit_in_dollars: number;  // Monthly credit reward
  isAtSeatLimit: boolean;        // Computed: team at seat limit
  remainingSeats: number;        // Computed: seats available
}
```

### Well-Known Plans
```typescript
export const WELL_KNOWN_PLANS = {
  FREE: "00000000-0000-0000-0000-000000000001",
  STARTER: "00000000-0000-0000-0000-000000000002", 
  GROWTH: "00000000-0000-0000-0000-000000000003",
  SCALE: "00000000-0000-0000-0000-000000000004",
};
```

### Plan Pricing Structure
- **Free**: 20% markup, 1 seat, $0 monthly credits
- **Starter**: 15% markup, 10 seats, $500 monthly credits  
- **Growth**: 10% markup, 50 seats, $2500 monthly credits
- **Scale**: 5% markup, 100 seats, $5000 monthly credits

### Markup System
Plans include markup percentages that affect payment amounts:

```typescript
// packages/sdk/src/plan.ts
export const Markup = {
  add: ({ usdCents, markupPercentage }) => {
    return Math.round(usdCents * (1 + markupPercentage / 100));
  },
  remove: ({ usdCents, markupPercentage }) => {
    return Math.round(usdCents / (1 + markupPercentage / 100));
  },
};
```

## 3. Wallet Structure

### Well-Known Wallets
Each workspace has specific wallet accounts for different purposes:

```typescript
// packages/sdk/src/mcp/wallet/well-known.ts
export const WellKnownWallets = {
  workspace: {
    // Generation credits (main AI usage wallet)
    genCredits: (workspace: string) => [
      "user", 
      `workspace-gen-credits-${workspace}`,
      "liability"
    ],
    
    // Voucher system
    voucher: (id: string, amount: string) => [
      "user",
      `deco-chat-voucher-${id}-${amount}`,
      "liability"
    ]
  }
}
```

### Account Types
- **Generation Credits**: Main wallet for AI usage (`liability` account)  
- **Vouchers**: Transferable credits between workspaces

**Note**: Trial credits have been removed from the system.

## 4. Transaction System

### Transaction Types

```typescript
// packages/sdk/src/mcp/wallet/client.ts
export type Transaction =
  | AgentGeneration      // AI agent usage
  | LLMGeneration        // Direct AI generation (stateless)
  | WorkspaceCashIn      // Stripe payments
  | WorkspaceGenCreditReward  // Monthly plan credits
  | WorkspaceCreateVoucher    // Create transferable voucher
  | WorkspaceRedeemVoucher    // Redeem voucher
  | PreAuthorization     // Reserve funds for operations
  | CommitPreAuthorized  // Commit reserved funds
```

### Usage Transactions

#### Agent Generation
Tracks AI usage through conversational agents:

```typescript
interface AgentGeneration {
  type: "AgentGeneration";
  usage: {
    usage: LanguageModelUsage;  // Token counts
    model: string;              // Model name
    agentId: string;
    threadId: string;
    workspace: string;
    agentPath: string;
  };
  generatedBy: { type: "user"; id: string };
  vendor: { type: "vendor"; id: string };
  // payer field removed - no longer using trial credits
  timestamp: Date;
}
```

#### LLM Generation  
Tracks direct AI API usage (no agent context):

```typescript
interface LLMGeneration {
  type: "LLMGeneration";
  usage: {
    workspace: string;
    model: string;
    usage: LanguageModelUsage;
  };
  // Same structure as AgentGeneration
}
```

### Payment Transactions

#### Workspace Cash In
Records Stripe payments with markup applied:

```typescript
interface WorkspaceCashIn {
  type: "WorkspaceCashIn";
  amount: string;  // MicroDollar string format (after markup removal)
  workspace: string;
  timestamp: Date;
}
```

#### Monthly Plan Credits
Automatic monthly credit rewards based on plan:

```typescript
interface WorkspaceGenCreditReward {
  type: "WorkspaceGenCreditReward";
  amount: string;  // MicroDollar string format
  workspace: string;
  timestamp: Date;
}
```

## 5. Wallet API Client

### Core Operations

```typescript
// packages/sdk/src/mcp/wallet/client.ts
export interface WalletAPI {
  // Account management
  "GET /accounts/:id": {
    response: {
      balance: string;        // MicroDollar string
      discriminator: string;
      category: string;
      type: string;
    };
  };
  
  // Transaction management
  "POST /transactions": {
    body: Omit<Transaction, "timestamp">;
    response: { id: string };
  };
  
  // Usage analytics
  "GET /usage/agents": {
    searchParams: {
      workspace: string;
      range: "day" | "week" | "month";
    };
    response: {
      total: string;
      items: { id: string; label: string; total: string; }[];
    };
  };
  
  "GET /usage/threads": {
    searchParams: {
      workspace: string; 
      range: "day" | "week" | "month";
    };
    response: {
      total: string;
      items: {
        id: string;
        total: string;
        agentId: string;
        generatedBy: string;
        tokens: LanguageModelUsage;
      }[];
    };
  };
}
```

### Client Creation

```typescript
// packages/sdk/src/mcp/wallet/index.ts
import { createWalletClient } from "@deco/sdk/mcp/wallet";

const wallet = createWalletClient(apiKey, fetcher);
```

## 6. Agent Wallet Integration

### Agent Wallet Class
Each AI agent has a wallet instance for usage tracking:

```typescript
// packages/ai/src/agent/wallet.ts
export class AgentWallet {
  private config: AgentWalletConfig;
  private hasBalanceCache: WebCache<boolean>;
  
  // Check if workspace has sufficient funds
  async canProceed(): Promise<boolean>
  
  // Check actual balance
  async hasBalance(): Promise<boolean>
  
  // Record LLM usage and charge wallet
  async computeLLMUsage(opts: ComputeAgentUsageOpts): Promise<void>
}
```

### Usage Flow in Agents

```typescript
// In AI agent before generation
const hasBalance = await this.wallet.canProceed();
if (!hasBalance) {
  throw new Error("Insufficient funds");
}

// After generation completes
await this.wallet.computeLLMUsage({
  userId,
  usage,        // Token counts from AI response
  threadId,
  model,
  modelId,
  // plan parameter removed
});
```

## 7. Billing Integration (Stripe)

### Payment Flow with Markup

1. **Create Checkout Session**
   ```typescript
   // packages/sdk/src/mcp/wallet/api.ts
   export const createCheckoutSession = createTool({
     name: "CREATE_CHECKOUT_SESSION",
     inputSchema: z.object({
       amountUSDCents: z.number(),
       successUrl: z.string(), 
       cancelUrl: z.string(),
     }),
     handler: async ({ amountUSDCents, successUrl, cancelUrl }, ctx) => {
       const plan = await getPlan(ctx);
       const amount = Markup.add({
         usdCents: amountUSDCents,
         markupPercentage: plan.markup,
       });
       // Creates Stripe checkout session with markup applied
       // Returns { url: string }
     }
   });
   ```

2. **Webhook Processing**
   ```typescript
   // packages/sdk/src/mcp/wallet/stripe/webhook.ts
   export const handleStripeWebhook = async (c: Context) => {
     const event = await verifyAndParseStripeEvent(payload, signature, ctx);
     
     // Remove markup from received amount
     const plan = await getPlan(contextWithWorkspace);
     const amount = await getAmountInDollars({
       context,
       amountReceivedUSDCentsWithMarkup: event.data.object.amount_received,
       currency: event.data.object.currency,
       plan,
     });
     
     // Creates WorkspaceCashIn transaction
     await wallet["PUT /transactions/:id"]({ id: idempotentId }, { 
       body: transaction 
     });
   }
   ```

### Currency Conversion with Markup
- Stripe payments in BRL (Brazil-based account)
- Plan markup applied to checkout amounts
- Webhook removes markup before crediting wallet

```typescript
// packages/sdk/src/mcp/wallet/stripe/webhook.ts
async function getAmountInDollars({
  context,
  amountReceivedUSDCentsWithMarkup,
  currency,
  plan,
}) {
  const conversionRate = currencies[currency.toUpperCase()].value;
  
  // Remove markup from received amount
  const amountReceivedUSDCents = Markup.remove({
    usdCents: amountReceivedUSDCentsWithMarkup,
    markupPercentage: plan.markup,
  });
  
  const amount = amountReceivedUSDCents / 100;
  const microDollarsString = String(
    Math.round((amount / conversionRate) * 1_000_000)
  );
  return MicroDollar.fromMicrodollarString(microDollarsString);
}
```

## 8. Monthly Credits System

### Automatic Monthly Rewards
Teams receive monthly credits based on their plan:

```typescript
// packages/sdk/src/mcp/teams/api.ts
const ensureMonthlyPlanCreditsReward = async ({
  slug,
  workspace,
  context: c,
}) => {
  const team = await getTeamBySlug(slug, c.db);
  const monthlyReward = team.plan.monthly_credit_in_dollars;
  const monthlyRewardMicroDollars = MicroDollar.fromDollars(monthlyReward);

  const month = String(new Date().getMonth() + 1);
  const year = String(new Date().getFullYear());

  const transactionId = WellKnownTransactions.monthlyPlanCreditsReward(
    encodeURIComponent(workspace),
    month,
    year,
  );

  const transaction: Transaction = {
    type: "WorkspaceGenCreditReward",
    amount: monthlyRewardMicroDollars.toMicrodollarString(),
    workspace,
    timestamp: new Date(),
  };

  await wallet["PUT /transactions/:id"]({ id: transactionId }, {
    body: transaction,
  });
};
```

### Well-Known Transactions
```typescript
// packages/sdk/src/mcp/wallet/well-known.ts
export const WellKnownTransactions = {
  monthlyPlanCreditsReward: (
    workspaceId: string,
    month: ValidMonth,
    year: ValidYear,
  ) => `monthly-plan-credits-reward-${workspaceId}-${month}-${year}`,
} as const;
```

## 9. MCP Tools Integration

### Wallet Tools Group

```typescript
// packages/sdk/src/mcp/wallet/api.ts
const createTool = createToolGroup("Wallet", {
  name: "Wallet & Billing",
  description: "Handle payments and subscriptions.",
  icon: "https://assets.decocache.com/mcp/.../Wallet--Billing.png"
});

// Available tools:
// - GET_WALLET_ACCOUNT: Get balance for workspace
// - GET_THREADS_USAGE: Usage analytics by thread  
// - GET_AGENTS_USAGE: Usage analytics by agent
// - CREATE_CHECKOUT_SESSION: Stripe payment flow with markup
// - CREATE_VOUCHER: Create transferable credits
// - REDEEM_VOUCHER: Redeem voucher credits
// - GET_WORKSPACE_PLAN: Get plan details and metadata
```

### Authorization & Access Control
All wallet tools require workspace access:

```typescript
handler: async (input, c) => {
  assertHasWorkspace(c);
  await assertWorkspaceResourceAccess(c);
  
  const wallet = getWalletClient(c);
  // ... tool implementation
}
```

## 10. Team Management & Seat Limits

### Seat Tracking
Plans track team membership and enforce seat limits:

```typescript
// packages/sdk/src/mcp/members/invites-utils.ts
export function enrichPlanWithTeamMetadata({ team, plan }) {
  const members = team.members
    .map(extractOptionalProfile)
    .filter(filterExistingEmail)
    .filter(excludeDevEmails);  // deco.cx emails don't count

  const remainingSeats = Math.max(plan.user_seats - members.length, 0);

  return {
    ...plan,
    remainingSeats,
    isAtSeatLimit: remainingSeats === 0,
  };
}
```

### Invitation Controls
Team invitations now check seat limits instead of features:

```typescript
// packages/sdk/src/mcp/members/api.ts
export const inviteTeamMembers = createTool({
  // ... other config
  handler: async ({ invitees, teamId }, c) => {
    const team = await getTeamById(teamId, c.db);
    const plan = enrichPlanWithTeamMetadata({ team, plan: team.plan });

    if (inviteesToInvite.length > plan.remainingSeats) {
      throw new UserInputError(
        `You don't have enough remaining seats to invite ${inviteesToInvite.length} users`,
      );
    }
    
    // ... rest of invitation logic
  }
});
```

## 11. UI Components & Plan Display

### Plan Protection Component
The `Protect` component now uses plan-based checks:

```typescript
// apps/web/src/components/wallet/plan.tsx
export function Protect({ check, fallback, children }) {
  const plan = usePlan();
  const canShow = check(plan);

  if (!canShow) {
    return fallback;
  }

  return children;
}

// Usage example:
<Protect
  check={(plan) => !plan.isAtSeatLimit}
  fallback={<InviteTeamMembersDialogFeatureWall />}
>
  <InviteDialog />
</Protect>
```

### Deposit Dialog with Markup Display
The deposit dialog now shows markup calculations:

```typescript
// apps/web/src/components/wallet/deposit-dialog.tsx
export function DepositDialog() {
  const plan = usePlan();
  
  return (
    <div className="rounded-xl border border-border bg-muted/30 p-3">
      <div className="flex justify-between items-center text-sm">
        <span className="text-muted-foreground">Credit amount:</span>
        <span>{formatCurrency(creditAmount)}</span>
      </div>
      {plan.markup > 0 && (
        <>
          <div className="flex justify-between items-center text-sm">
            <span className="text-muted-foreground">
              Your plan deposit fee ({plan.markup}%):
            </span>
            <span>
              {formatCurrency(markupAmount)}
            </span>
          </div>
          <div className="flex justify-between items-center text-sm font-medium pt-2 border-t border-border mt-2">
            <span>Total charge:</span>
            <span>{formatCurrency(totalAmount)}</span>
          </div>
        </>
      )}
    </div>
  );
}
```

## 12. Usage Analytics & Reporting

### Data Structure
Usage is tracked at multiple levels:

- **Agent Level**: Total spend per agent across all threads
- **Thread Level**: Detailed usage per conversation thread  
- **Model Level**: Token usage and costs by AI model
- **Time-based**: Daily, weekly, monthly aggregations

### Display Formatting

```typescript
// Format usage for display
const AgentsUsage = {
  format: (usage) => ({
    total: MicroDollar.fromMicrodollarString(usage.total).display(),
    items: usage.items.map(item => ({
      id: item.id,
      label: item.label,
      total: MicroDollar.fromMicrodollarString(item.total).toDollars()
    }))
  })
};
```

## 13. Error Handling & Edge Cases

### Insufficient Funds
```typescript
// Check before AI operations
const hasBalance = await wallet.canProceed();
if (!hasBalance) {
  throw new Error("Insufficient funds");
}
```

### Seat Limit Errors
```typescript
// Check before team invitations
if (inviteesToInvite.length > plan.remainingSeats) {
  throw new UserInputError(
    `You don't have enough remaining seats to invite ${inviteesToInvite.length} users`,
  );
}
```

### Retry Logic
Wallet operations include retry logic for conflicts:

```typescript
let retries = 3;
while (retries > 0) {
  const response = await wallet["PUT /transactions/:id"](params);
  if (response.ok || response.status === 304) break;
  
  if (response.status === 409) {  // Conflict
    retries--;
    await new Promise(resolve => setTimeout(resolve, 5000));
    continue;
  }
  throw new Error("Transaction failed");
}
```

## 14. Plan Management & Database

### Plan Database Schema
```sql
CREATE TABLE deco_chat_plans (
    id UUID PRIMARY KEY,
    title TEXT NOT NULL,
    markup INTEGER NOT NULL,
    user_seats INTEGER NOT NULL,
    monthly_credit_in_dollars INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE teams ADD COLUMN plan_id UUID NOT NULL 
    REFERENCES deco_chat_plans(id) 
    DEFAULT '00000000-0000-0000-0000-000000000001';  -- Free plan
```

### Plan Retrieval
```typescript
// packages/sdk/src/mcp/wallet/plans.ts
export const getPlan = async (c: AppContext): Promise<PlanWithTeamMetadata> => {
  assertHasWorkspace(c);
  return c.workspace.root === "users"
    ? await getPersonalWorkspacePlan(c)  // Always free plan
    : await getTeamPlan(c);             // Team-based plan
};
```

## Implementation Notes

### Performance Optimizations
- **Balance Caching**: Wallet balance cached with TTL to reduce API calls
- **Lazy Balance Checks**: Background cache updates to minimize blocking
- **Batch Operations**: Group transaction processing where possible
- **Plan Caching**: Plan metadata cached to reduce database lookups

### Security Considerations  
- **API Key Authentication**: All wallet API calls require valid API key
- **Workspace Authorization**: Users can only access their workspace wallets
- **Idempotent Operations**: Stripe webhooks use event IDs for idempotency
- **Input Validation**: All monetary amounts validated before processing
- **Seat Limit Enforcement**: Team invitations blocked when at capacity

### Monitoring & Observability
- Transaction failures logged for debugging
- Usage patterns tracked for analytics
- Balance alerts for low-credit workspaces
- Performance metrics for wallet operations
- Plan upgrade/downgrade tracking
- Monthly credit distribution monitoring

### Migration Notes
- **Removed Features**: Old feature-based system (`invite-to-workspace`, `ai-wallet-deposit`, `trial-usage`) replaced with plan-based checks
- **Trial Credits**: No longer automatically awarded or tracked separately
- **Payer System**: Removed from transaction records
- **Error Messages**: Updated to reflect plan-based restrictions instead of feature restrictions 