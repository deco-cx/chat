---
import { getCollection } from "astro:content";
import { ui } from '../i18n/ui';
import SidebarComponent from './Sidebar.tsx';

const locale = Astro.params.locale;

const allDocs = await getCollection("docs");
const docs = allDocs
  .filter((doc) => doc.id.split("/")[0] === locale);

interface TreeNode {
  name: string;
  type: 'file' | 'folder';
  children: TreeNode[];
  doc?: any;
  path: string[];
  id: string;
}

function buildTree(docs: any[]): TreeNode[] {
  const root: TreeNode[] = [];
  
  docs.forEach((doc) => {
    const pathParts = doc.id.split("/").slice(1);
    let currentLevel = root;
    
    pathParts.forEach((part: string, index: number) => {
      const isFile = index === pathParts.length - 1;
      const existing = currentLevel.find(node => node.name === part);
      
      if (existing) {
        if (isFile) {
          existing.doc = doc;
        }
        currentLevel = existing.children;
      } else {
        const newNode: TreeNode = {
          name: part,
          type: isFile ? 'file' : 'folder',
          children: [],
          path: pathParts.slice(0, index + 1),
          id: pathParts.slice(0, index + 1).join('/'),
          ...(isFile && { doc })
        };
        currentLevel.push(newNode);
        currentLevel = newNode.children;
      }
    });
  });
  
  return root;
}

const tree = buildTree(docs);

interface FlatNode {
  name: string;
  type: 'file' | 'folder';
  doc?: any;
  path: string[];
  depth: number;
  id: string;
  hasChildren: boolean;
}

function flattenTree(nodes: TreeNode[], depth = 0): FlatNode[] {
  const result: FlatNode[] = [];
  
  nodes.forEach((node) => {
    result.push({
      name: node.name,
      type: node.type,
      doc: node.doc,
      path: node.path,
      depth,
      id: node.id,
      hasChildren: node.children.length > 0
    });
    
    if (node.children.length > 0) {
      result.push(...flattenTree(node.children, depth + 1));
    }
  });
  
  return result;
}

const flatTree = flattenTree(tree);
---

<SidebarComponent client:load tree={flatTree} locale={locale || 'en'} translations={ui[locale as keyof typeof ui] || ui.en} />