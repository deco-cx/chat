---
import { Icon } from "../Icon.tsx";

interface Props {
  language?: string;
  lines?: boolean;
  icon?: string;
  title?: string;
  expandable?: boolean;
  wrap?: boolean;
}

const {
  language,
  lines = false,
  icon,
  title,
  expandable = false,
  wrap = false,
} = Astro.props;

// Get the code content from the slot
let codeContent = await Astro.slots.render("default");

// Clean up any extra whitespace
codeContent = codeContent.trim();

// Calculate number of lines for line numbers
const lineCount = codeContent.split("\n").length;
const maxVisibleLines = 5; // Always show 5 lines when collapsed

// For expandable blocks, determine if we should show collapsed initially
const showCollapsed = expandable && lineCount > maxVisibleLines;

// Generate line numbers array (full list for both states)
const lineNumbers = Array.from({ length: lineCount }, (_, i) => i + 1);
const visibleLineNumbers = showCollapsed
  ? lineNumbers.slice(0, maxVisibleLines)
  : lineNumbers;

// Split code into visible and hidden parts for expandable
const codeLines = codeContent.split("\n");
const visibleCode = showCollapsed
  ? codeLines.slice(0, maxVisibleLines).join("\n")
  : codeContent;
const hiddenCode = showCollapsed
  ? codeLines.slice(maxVisibleLines).join("\n")
  : "";
---

<div class="relative rounded-xl border border-stone-200 bg-stone-100 my-4 p-1">
  {/* Header with title/language, icon, and copy button */}
  {
    (title || language || icon) && (
      <div class="flex items-center justify-between px-4 py-2.5 text-sm text-stone-500">
        <div class="flex items-center gap-2">
          {icon && <Icon name={icon} size={16} className="opacity-50" />}
          <span class="font-medium">{title || `${language || "code"}`}</span>
        </div>
        <button
          class="flex items-center gap-2 hover:text-stone-800 transition-colors copy-button"
          data-copy-content={codeContent.trim()}
          title="Copy to clipboard"
        >
          <Icon name="Copy" size={16} />
        </button>
      </div>
    )
  }

  {/* Code container */}
  <div class="bg-white rounded-xl border border-stone-200 relative">
    <div class="flex">
      {/* Line numbers */}
      {
        lines && (
          <div class="flex flex-col p-4 pr-6 text-sm font-mono text-stone-500 select-none shrink-0 line-numbers-container">
            {visibleLineNumbers.map((num) => (
              <div class="opacity-50 leading-[1.625]">{num}</div>
            ))}
            {showCollapsed && <div class="opacity-50 leading-[1.625]">...</div>}
          </div>
        )
      }

      {/* Code content */}
      <div class="flex-1 relative">
        <pre
          class={`p-4 text-sm font-mono text-stone-500 leading-[1.625] bg-transparent ${wrap ? "whitespace-pre-wrap break-words" : "overflow-x-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-stone-300"} ${expandable ? "expandable-code" : ""}`}>
          <code class={`language-${language || 'text'}`}>
            <div class="code-visible-part">
              {visibleCode}
            </div>
            {showCollapsed && hiddenCode && (
              <div class="code-hidden-part hidden">
                <span>
{hiddenCode}
                </span>
              </div>
            )}
          </code>
        </pre>

        {/* Copy button for code without header */}
        {
          !(title || language || icon) && (
            <button
              class="absolute top-4 right-4 text-stone-500 hover:text-stone-800 transition-colors copy-button opacity-0 group-hover:opacity-100"
              data-copy-content={codeContent.trim()}
              title="Copy to clipboard"
            >
              <Icon name="Copy" size={16} />
            </button>
          )
        }
      </div>
    </div>

    {/* Expand/Collapse footer */}
    {
      showCollapsed && (
        <div class="flex items-center gap-1 px-4 py-2.5 border-t border-stone-200 text-sm text-stone-500 cursor-pointer expand-toggle hover:text-stone-800 transition-colors">
          <Icon name="MoreHorizontal" size={16} className="opacity-50" />
          <span class="font-medium">
            <span class="expand-text">See all {lineCount} lines</span>
            <span class="collapse-text hidden">Show less</span>
          </span>
        </div>
      )
    }
  </div>
</div>

<style>
  /* Custom scrollbar */
  .overflow-x-auto::-webkit-scrollbar {
    height: 6px;
  }

  .overflow-x-auto::-webkit-scrollbar-track {
    background: transparent;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb {
    background: #d6d3d1;
    border-radius: 3px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #a8a29e;
  }

  /* Apply basic highlighting to common patterns */
  code {
    color: #78716c;
  }
</style>

<script>
  // Simple syntax highlighting
  function applySyntaxHighlighting() {
    const codeElements = document.querySelectorAll('code[class^="language-"]');

    codeElements.forEach((element) => {
      // Get all text content including hidden parts
      const visiblePart = element.querySelector(".code-visible-part");
      const hiddenPart = element.querySelector(".code-hidden-part");

      if (visiblePart) {
        highlightCodePart(visiblePart);
      }
      if (hiddenPart) {
        highlightCodePart(hiddenPart);
      }
    });
  }

  function highlightCodePart(element: any) {
    let code = element.textContent || "";
    const codeElement = element.closest("code");
    const language = codeElement?.className.match(/language-(\w+)/)?.[1];

    if (language === "javascript" || language === "typescript") {
      code = code
        .replace(
          /\b(const|let|var|function|class|if|else|for|while|return|import|export)\b/g,
          '<span style="color: #ef4444;">$1</span>'
        )
        .replace(
          /\b(console|Math|Date|Array|Object)\b/g,
          '<span style="color: #8b5cf6;">$1</span>'
        )
        .replace(/"([^"]*)"/g, '<span style="color: #172554;">"$1"</span>')
        .replace(/'([^']*)'/g, "<span style=\"color: #172554;\">'$1'</span>")
        .replace(/`([^`]*)`/g, '<span style="color: #172554;">`$1`</span>');
    }

    if (language === "python") {
      code = code
        .replace(
          /\b(def|class|if|else|for|while|return|import|from)\b/g,
          '<span style="color: #ef4444;">$1</span>'
        )
        .replace(
          /\b(print|len|range|str|int|list)\b/g,
          '<span style="color: #8b5cf6;">$1</span>'
        )
        .replace(/"([^"]*)"/g, '<span style="color: #172554;">"$1"</span>')
        .replace(/'([^']*)'/g, "<span style=\"color: #172554;\">'$1'</span>");
    }

    if (language === "java") {
      code = code
        .replace(
          /\b(class|public|private|static|void|if|else|for|while|return|import)\b/g,
          '<span style="color: #ef4444;">$1</span>'
        )
        .replace(
          /\b(System|String|main|println)\b/g,
          '<span style="color: #8b5cf6;">$1</span>'
        )
        .replace(/"([^"]*)"/g, '<span style="color: #172554;">"$1"</span>');
    }

    element.innerHTML = code;
  }

  // Copy functionality
  document.addEventListener("click", async (e) => {
    const button = (e.target as HTMLElement)?.closest(".copy-button");
    if (!button) return;

    const content = button.getAttribute("data-copy-content");
    if (!content) return;

    try {
      await navigator.clipboard.writeText(content);

      // Visual feedback
      const originalIcon = button.innerHTML;
      button.innerHTML =
        '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 6L9 17l-5-5"/></svg>';

      setTimeout(() => {
        button.innerHTML = originalIcon;
      }, 1000);
    } catch (err) {
      console.warn("Failed to copy to clipboard:", err);
    }
  });

  // Expand/collapse functionality
  document.addEventListener("click", (e) => {
    const toggle = (e.target as HTMLElement)?.closest(".expand-toggle");
    if (!toggle) return;

    const codeBlock = toggle.closest(".relative");
    if (!codeBlock) return;

    const isExpanded = codeBlock.classList.contains("expanded");
    const hiddenPart = codeBlock.querySelector(".code-hidden-part");
    const expandText = codeBlock.querySelector(".expand-text");
    const collapseText = codeBlock.querySelector(".collapse-text");
    const lineNumbersContainer = codeBlock.querySelector(
      ".line-numbers-container"
    );

    if (isExpanded) {
      // Collapse
      codeBlock.classList.remove("expanded");
      if (hiddenPart) hiddenPart.classList.add("hidden");
      if (expandText) expandText.classList.remove("hidden");
      if (collapseText) collapseText.classList.add("hidden");

      // Reset line numbers to show only first 5
      if (lineNumbersContainer) {
        const visibleLines = Array.from({ length: 5 }, (_, i) => i + 1);
        lineNumbersContainer.innerHTML =
          visibleLines
            .map(
              (num) => `<div class="opacity-50 leading-[1.625]">${num}</div>`
            )
            .join("") + '<div class="opacity-50 leading-[1.625]">...</div>';
      }
    } else {
      // Expand
      codeBlock.classList.add("expanded");
      if (hiddenPart) hiddenPart.classList.remove("hidden");
      if (expandText) expandText.classList.add("hidden");
      if (collapseText) collapseText.classList.remove("hidden");

      // Show all line numbers
      if (lineNumbersContainer) {
        const expandTextElement = toggle.querySelector(".expand-text");
        const totalLinesMatch = expandTextElement?.textContent?.match(/\d+/);
        if (totalLinesMatch) {
          const totalLines = parseInt(totalLinesMatch[0]);
          const allLines = Array.from({ length: totalLines }, (_, i) => i + 1);
          lineNumbersContainer.innerHTML = allLines
            .map(
              (num) => `<div class="opacity-50 leading-[1.625]">${num}</div>`
            )
            .join("");
        }
      }

      // Re-apply syntax highlighting to newly visible code
      setTimeout(applySyntaxHighlighting, 10);
    }
  });

  // Apply syntax highlighting when page loads
  document.addEventListener("DOMContentLoaded", applySyntaxHighlighting);
  setTimeout(applySyntaxHighlighting, 100);
</script>
